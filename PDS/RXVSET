/* REXX */

/*
This exec will set up an ESDS VSAM file for use by the other execs that
test the RXVSAM function.
*/

ARG user allocmethod allocvalue .
IF (user = '') | (user = '*') | (user = '.') THEN user = USERID()

parse source mysource
/* SAY 'Source="'mysource'"' */
myaddrsp = WORD(mysource, 8)
IF (myaddrsp = 'MVS') | (myaddrsp = 'OMVS') THEN DO
  SAY 'Execution under' myaddrsp 'is not supported, please use IKJEFT01'
  EXIT 16
END

myenv = SYSVAR('SYSENV')
IF myenv = 'BACK' THEN DO
  alloc = GetAlloc(allocmethod, allocvalue)
  IF alloc = '?' THEN alloc = AskAlloc()
END
ELSE DO
  alloc = AskAlloc()
END

dsn = user || '.VSAMESDS'

xmsg = msg('OFF')
address TSO "DELETE '"dsn"' PURGE"   /* ignore r.c. */
xmsg = msg(xmsg)

SAY         "DEFINE CLUSTER (NAME('"dsn"') NONINDEXED RECSZ(80 80) ",
    "REUSE" alloc "SHAREOPTIONS(2 3)) ",
    "DATA (NAME('"dsn".DATA') CYLINDERS(5 2))"

address TSO "DEFINE CLUSTER (NAME('"dsn"') NONINDEXED RECSZ(80 80) ",
    "REUSE" alloc "SHAREOPTIONS(2 3)) ",
    "DATA (NAME('"dsn".DATA') CYLINDERS(5 2))"

SAY "Return code after ESDS DEFINE was" rc

/*
This exec will set up a KSDS VSAM file for use by the other execs that
test the RXVSAM function.
*/

ARG user allocmethod allocvalue .
IF (user = '') | (user = '*') | (user = '.') THEN user = USERID()

parse source mysource
/* SAY 'Source="'mysource'"' */
myaddrsp = WORD(mysource, 8)
IF (myaddrsp = 'MVS') | (myaddrsp = 'OMVS') THEN DO
  SAY 'Execution under' myaddrsp 'is not supported, please use IKJEFT01'
  EXIT 16
END

myenv = SYSVAR('SYSENV')
IF myenv = 'BACK' THEN DO
  alloc = GetAlloc(allocmethod, allocvalue)
  IF alloc = '?' THEN alloc = AskAlloc()
END

dsn = user || '.VSAMKSDS'

xmsg = msg('OFF')
address TSO "DELETE '"dsn"' PURGE"   /* ignore r.c. */
xmsg = msg(xmsg)

SAY         "DEFINE CLUSTER (NAME('"dsn"') INDEXED RECSZ(40 200) ",
    "KEYS(8 0) REUSE" alloc "SHAREOPTIONS(2 3)) ",
    "DATA (NAME('"dsn".DATA') CYLINDERS(3 1))",
    "INDEX (NAME('"dsn".INDEX') TRACKS(2 1))"

address TSO "DEFINE CLUSTER (NAME('"dsn"') INDEXED RECSZ(40 200) ",
    "KEYS(8 0) REUSE" alloc "SHAREOPTIONS(2 3)) ",
    "DATA (NAME('"dsn".DATA') CYLINDERS(3 1))",
    "INDEX (NAME('"dsn".INDEX') TRACKS(2 1))"

SAY "Return code after KSDS DEFINE was" rc

/*
This exec will set up an RRDS VSAM file for use by the other execs that
test the RXVSAM function.
*/

ARG user allocmethod allocvalue .
IF (user = '') | (user = '*') | (user = '.') THEN user = USERID()

parse source mysource
/* SAY 'Source="'mysource'"' */
myaddrsp = WORD(mysource, 8)
IF (myaddrsp = 'MVS') | (myaddrsp = 'OMVS') THEN DO
  SAY 'Execution under' myaddrsp 'is not supported, please use IKJEFT01'
  EXIT 16
END

myenv = SYSVAR('SYSENV')
IF myenv = 'BACK' THEN DO
  alloc = GetAlloc(allocmethod, allocvalue)
  IF alloc = '?' THEN alloc = AskAlloc()
END

dsn = user || '.VSAMRRDS'

xmsg = msg('OFF')
address TSO "DELETE '"dsn"' PURGE"   /* ignore r.c. */
xmsg = msg(xmsg)

SAY         "DEFINE CLUSTER (NAME('"dsn"') NUMBERED RECSZ(80 80) ",
    "REUSE" alloc "SHAREOPTIONS(2 3)) ",
    "DATA (NAME('"dsn".DATA') CYLINDERS(3 1))"

address TSO "DEFINE CLUSTER (NAME('"dsn"') NUMBERED RECSZ(80 80) ",
    "REUSE" alloc "SHAREOPTIONS(2 3)) ",
    "DATA (NAME('"dsn".DATA') CYLINDERS(3 1))"

SAY "Return code after RRDS DEFINE was" rc

exit

/* Called subroutine to get background allocation type and value */
GetAlloc:
  ARG argmethod, argvalue
  IF (argmethod = '') | (argvalue = '') THEN DO
    myddname = WORD(mysource, 4)
    ddlegal = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$#@'
    IF myddname = '?' THEN DO
      SAY 'Allocation method and/or value not supplied and SOURCE' ,
          'DDName = ?, expecting interactive answers'
      allocstr = '?'
    END
    ELSE IF (LENGTH(myddname) > 8) | ,
            (VERIFY(myddname, ddlegal) > 0) THEN DO
      IF (VERIFY(myddname, '00'X, 'M') > 0) THEN DO
        mydsname = TRANSLATE(myddname, ' ', '00'X)
      END
      RC = LISTDSI("'"mydsname"'" 'SMSINFO')
    END
    ELSE DO
      RC = LISTDSI(myddname 'FILE SMSINFO')
    END
    IF RC = 0 THEN DO
      IF (SYSSTORCLASS = '') | ,
         (SYMBOL('SYSSTORCLASS') <> 'VAR') THEN DO
        argmethod = 'V'
        argvalue = SYSVOLUME
        SAY 'Dynamically selected (V)olume method' ,
            'and value =' argvalue 'for file allocation'
        allocstr = 'VOLUME('argvalue')'
      END
      ELSE DO
        argmethod = 'S'
        argvalue = SYSSTORCLASS
        SAY 'Dynamically selected (S)torclas method' ,
            'and value =' argvalue 'for file allocation'
        allocstr = 'STORCLAS('argvalue')'
      END
    END
    ELSE DO
      SAY 'LISTDSI failed, RC =' RC
      SAY 'SYSMSGLVL1 =' SYSMSGLVL1
      SAY 'SYSMSGLVL2 =' SYSMSGLVL2
      allocstr = '?'
    END
  END
  ELSE DO
    IF      argmethod = 'S' THEN allocstr = 'STORCLAS('argvalue')'
    ELSE IF argmethod = 'V' THEN allocstr = 'VOLUME('argvalue')'
    ELSE DO
      SAY 'Please use V or S to select allocation method'
      EXIT 8
    END
  END

  RETURN allocstr

/* Called subroutine to ask foreground allocation type and value */
AskAlloc:
  SAY 'Allocate files by (V)olume or by (S)torclas?'
  PARSE UPPER PULL alctyp
  IF LENGTH(alctyp) < 1 THEN
    DO
      SAY 'Please reply V or S to select allocation method'
      EXIT 8
    END

  IF (alctyp = 'V') THEN
    DO
      SAY 'Please enter a 6 character volume id for definition of an ESDS'
      PARSE UPPER PULL vol
      IF LENGTH(vol) \= 6 THEN
        DO
          SAY vol 'is not 6 characters'
          EXIT 8
        END
      defval = vol
      allocstr = "VOLUMES("vol")"
    END
  ELSE
    DO
      SAY 'Please enter a 1-8 character STORCLAS name for ESDS definition'
      PARSE UPPER PULL scl
      IF (LENGTH(scl) < 1) | (LENGTH(scl) > 8) THEN
        DO
          SAY scl 'is not 1-8 characters'
          EXIT 8
        END
      defval = scl
      allocstr = "STORCLAS("scl")"
    END

  RETURN allocstr
